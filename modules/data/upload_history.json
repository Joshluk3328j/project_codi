[
  {
    "filename": "age_guesser_40.py",
    "content": "birth_year=int(input(\"what year were you born?\"))\r\nage= 2025-birth_year\r\nprint(f\"you are {age} years old\")"
  },
  {
    "filename": "age_guesser_40.py",
    "content": "birth_year=int(input(\"what year were you born?\"))\r\nage= 2025-birth_year\r\nprint(f\"you are {age} years old\")"
  },
  {
    "filename": "gui_78.py",
    "content": "picture=[\r\n    [0,0,0,1,0,0,0],\r\n    [0,0,1,1,1,0,0],\r\n    [0,1,1,1,1,1,0],\r\n    [1,1,1,1,1,1,1],\r\n    [0,0,0,1,0,0,0],\r\n    [0,0,0,1,0,0,0]\r\n]\r\n\r\nfor row in picture:\r\n    for pixel in row:\r\n        if pixel:\r\n            print(\"*\", end=\"\")\r\n        else:\r\n            print(\" \",end=\"\")\r\n    print(\"\")"
  },
  {
    "filename": "age_guesser_40.py",
    "content": "birth_year=int(input(\"what year were you born?\"))\r\nage= 2025-birth_year\r\nprint(f\"you are {age} years old\")"
  },
  {
    "filename": "age_guesser_40.py",
    "content": "birth_year=int(input(\"what year were you born?\"))\r\nage= 2025-birth_year\r\nprint(f\"you are {age} years old\")"
  },
  {
    "filename": "fibunacci_169.py",
    "content": "from decorator_exerccise_158 import performance \r\n\r\n@performance\r\ndef fib(number): #mine\r\n    fib_no = 0\r\n    previous_no=0\r\n    current_no=1\r\n    count = 0\r\n    while count<number:\r\n        print(\"\\t\",fib_no)\r\n        fib_no = current_no + previous_no\r\n        previous_no = current_no\r\n        current_no = fib_no\r\n        count+=1\r\nfib(100)\r\n\r\n\r\n\r\n# @performance\r\ndef fib2(number): #his\r\n    a=0\r\n    b=1\r\n    for i in range(number+1):\r\n        yield a \r\n        temp = a\r\n        a=b\r\n        b=temp +b\r\n\r\n@performance\r\ndef stuff():\r\n    for x in fib2(100):\r\n        print(x)\r\n\r\n\r\nstuff()\r\n\r\n\r\n\r\n\r\n\r\n# class Fib():\r\n#     count = 0\r\n#     previous = 0\r\n#     current = 1\r\n#     fib_no = 0\r\n#     # def __init__(self):\r\n#     #     self.index = index\r\n#     def __iter__(self):\r\n#         return self\r\n#     # def __next__(self):\r\n#     #     if Fib.count < self.index:\r\n#     #         # print(fib_no)\r\n#     #         fib_no = Fib.current + Fib.previous\r\n#     #         Fib.previous = Fib.current\r\n#     #         Fib.current =  fib_no\r\n#     #         Fib.count+=1\r\n#     #         return fib_no \r\n#         # elif Fib.current == self.index:\r\n#         #     return \r\n\r\n#         raise StopIteration\r\n#     def get(self,):\r\n#         fib = 0\r\n#         previous_no=0\r\n#         current_no=1\r\n#         count = 0\r\n#         while count<num:\r\n#             # print(fib_no)\r\n#             fib = current_no + previous_no\r\n#             previous_no = current_no\r\n#             current_no = fib\r\n#             count+=1\r\n#         return fib\r\n\r\n# test1=Fib(20)\r\n\r\n# print(test1.get(10))\r\n\r\n\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())\r\n# # print(test1.__next__())"
  },
  {
    "filename": "Data_types_19.py",
    "content": "# Data types\r\n\r\n# int\r\nprint(type(2+4))\r\nprint(type(2/4))\r\nprint(type(2-4))\r\nprint(type(9.9 + 1.1))\r\n\r\nprint(9.9 + 1.1)\r\nprint(2**4)\r\nprint(5//4) # prints the number of times the right can go in the left\r\nprint(8%4)  # modulo\r\n\r\n# math functions (actions that can be performed on certain data types)\r\nprint(round(3.9))\r\nprint(abs(-500))\r\n\r\n# float 10.56 (float takes more space than integers in memory. it stores 10 in one place and the 56 in another)\r\nprint(bin(5)) #prints the binary representation of integers/floats\r\nprint(int(\"0b101\",2)) # prints the equivalent of ob101 (binary) in base 10\r\n\r\n\r\n# booleans -> bool\r\n# either true or false\r\nis_cool=True\r\nbool(1)\r\nbool(0)\r\n\r\n# str (they are immutable)\r\nprint(type(\"hi hello there\"))\r\nusername=\"supercoder\"\r\npassword=\"supersecret\"\r\n\r\nlong_string='''\r\nWOW\r\n0 0\r\n___\r\n''' #multiline text\r\nprint(long_string)\r\nfirst_name=\"joseph\"\r\nlast_name = \" babatunde\"\r\nfull_name= first_name + last_name #string concatenation\r\nprint(\"hi\" + \"my friend\")\r\n\r\nprint(full_name)\r\n\r\n\r\n# list (the are mutable)\r\nli=[1,2,3,4,5]\r\nl12=[\"a\",2,\"c\"]\r\namazon_cart=[\r\n    \"notebooks\", \r\n    \"sunglasses\",\r\n    \"toys\",\r\n    \"grapes\"]\r\namazon_cart[::-1]\r\namazon_cart[0::2]\r\namazon_cart[2]=\"it_changed\"\r\nnew_cart=amazon_cart #with this, any changes made to new_cart would reflect on amazon_cart\r\nnew_cart[0]=\"heyyy\"\r\nnewer_cart=amazon_cart.copy() #this is better\r\nnewer_cart[0]=\"my guyy\"\r\nprint(amazon_cart)\r\n\r\n\r\n\r\n# list slicing\r\n\r\n# Data structure\r\n\r\n# Tuple(faster than lists)(has only two methods)\r\n# immutable lists\r\nmy_tuple = (1,2,3,4,5)\r\nprint(my_tuple[2])\r\nprint(5 in my_tuple)\r\nnew_tuple=my_tuple[:2]\r\nprint(new_tuple)\r\nx,y,z, *other = (1,2,3,4,5)\r\nprint(my_tuple.count(4))\r\nprint(my_tuple.index(4))\r\n\r\n# set(unordered collection of unique items)\r\nmy_set = {1,2,3,4,5,5}\r\nprint(my_set) #returns only unique items, no duplicates at all \r\nmy_set.add(100)\r\nmy_set.add(2)\r\n\r\nmy_list = [1,2,3,4,5,4,3,2,1]\r\nmy_list=set(my_list)\r\nprint(my_list)\r\n# my_list[2] doesnt work here\r\n5 in my_list\r\nnew_set = my_set.copy()\r\nmy_set.clear()\r\n\r\n# dictinary (an unordered key value pair (now ordered in python 3.7))\r\n# dict (both a data type and a data structure, i.e a way to arrange our data somewhat)\r\ndictionary={\r\n    \"a\" : \"hello\",\r\n    \"b\" : [2,5,6,7,5,3,4,4,4],\r\n    \"x\" : 3\r\n} #\"a\" is a key as well as \"b\"\r\n# a key in dictionaries must be imu=mutable because they must not change, mostly strings and they must be unique\r\n#  a dictionary can contain any other data type\r\n# we can even put dictionaries into lists\r\nmy_list=[\r\n    {\r\n    \"a\" : \"hello\",\r\n    \"b\" : [2,5,6,7,5,3,4,4,4],\r\n    \"x\" : 3\r\n},\r\n{\r\n    \"a\" : \"hello\",\r\n    \"b\" : [2,5,6,7,5,3,4,4,4],\r\n    \"x\" : 3\r\n}\r\n]\r\n\r\nuser2 = dict(name=\"johnjohn\")\r\n\r\nfor key, value in my_list[0].items():\r\n    print(key, value)\r\n\r\ndictionary.update({\"a\": \"john\"}) #changes the value of \"a\" to \"john\"\r\n\r\nprint(dictionary.get(\"age\")) #checks if age is in dictionary \r\nprint(dictionary.get(\"age\", 55)) #checks if age is in dictionary and add a default value of 55 if it doesnt exist\r\nprint(dictionary[\"b\"][5])\r\nprint(user2)\r\nprint(\"name\" in user2)\r\nprint(user2.items())#grabs all items\r\n\r\n# complex\r\n\r\n# Classes -> custom types\r\n\r\n# Specialised data types\r\n\r\n# None #Nothing, the absence of value\r\n# None is the absence of value, also known as null\r\nweapons = None\r\nprint(weapons)\r\n\r\n\r\n# Video 24\r\n# Operator precedence\r\n# () -> Brackets\r\n# ** -> power\r\n# * and /\r\n# + and -\r\n\r\n\r\n# Type conversion\r\nprint(type(str(100))) #converts int 100 to a string\r\n# print(type(int(\"hiii\"))) # coverts string hiii to an integer"
  },
  {
    "filename": "decorator_exerccise_158.py",
    "content": "from time import time \r\n\r\ndef performance(fn):\r\n    def wrapper(*args,**kwargs):\r\n        print(\"*****************\")\r\n        t1 = time()\r\n        result=fn(*args,**kwargs)\r\n        t2=time()\r\n        print(f\"took {t2-t1} s\")\r\n        print(\"*****************\")\r\n        return result\r\n    return wrapper\r\n\r\n@performance\r\ndef long_time():\r\n    for i in range(10):\r\n        print(i*5)\r\n\r\n\r\nlong_time()\r\n\r\n# actual exercise\r\nuser1={\r\n    \"name\":\"sorna\",\r\n    \"valid\":False\r\n}\r\n\r\ndef authentication(fn):\r\n    def wrappper(user):\r\n        if user[\"valid\"]: #or user.get(\"valid\")\r\n            fn(user)\r\n        else:\r\n            return print(\"invalid user\")\r\n        return fn\r\n    return wrappper\r\n\r\n\r\n@authentication\r\ndef message_friends(user):\r\n    print(\"message has been sent\")\r\n\r\nmessage_friends(user1)"
  },
  {
    "filename": "age_guesser_40.py",
    "content": "birth_year=int(input(\"what year were you born?\"))\r\nage= 2025-birth_year\r\nprint(f\"you are {age} years old\")"
  }
]